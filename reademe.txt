1、自定生成当前项目所需依赖模块名称和版本号
安装 pipreqs==0.4.10依赖模块
命令行执行：pipreqs ./ --encoding=utf-8
自动生成到工程文件夹的文件名称：requirements.txt

pip freeze > requirements.txt

pip install -r requirement.txt

pipreqs ./ --encoding=utf-8 --force

2、父类方法不能够满足子类需求，就需要重写父类方法。调用时只会调用子类重写的方法，不会调用父类的方法。
对父类发方法进行扩展，使用supper()调用原本父类封装的方法，然后在增加子类的代码

3、面向对象三大特性
封装：根据职责将属性和方法封装到一个抽象的类中
继承：实现代码重用，相同的代码不需要重复编写。---有对父类方法重写、扩展，子类针对自动特有的需求，编写特定的代码
多态：不同对象调用相同的方法，产生不同的执行结果，增加代码灵活度。以继承和重写父类方法为前提。

子类对象，可以通过父类的公有方法间接访问到私有属性和私有方法
多继承，子类可以继承多个父类。父类之间存在同名的属性或方法，应该避免使用多继承。使用__mro__判断调用顺序

4、模块
每一个python文件都属于一个独立的模块。
import 模块名称
模块名称.调用模块的工具----全局变量、函数、类
导入模块取别名：import 模块名称 as 模块别名。别名使用大驼峰。如果两个模块中有相同的函数名称，就取别名
从某一个模块中导入部分工具 from 模块名 import 工具名。导入后不需要通过模块名.，可以直接使用模块提供的工具-----全局变量、函数、类
模块搜索顺序：首先在当前目录搜索指定模块文件，如果有就直接导入，没有再搜索系统目录，使用__file__可以查看完整路径
开发原则：每一个文件都应该是可以被导入的。__name__ 属性可以做到，测试模块的代码只在测试情况下被运行，而在被导入时不会被执行。
5、包
包是一个包含多个模块的特殊目录
目录下有一个特殊文件__init__.py
包的命名方式和变量名一样
好处：使用import包名可以一次性导入包中的所有模块
在外界使用包中的模块，需要在__init__.py中指定对外界提供的模块列表
# 从当前目录导入模块列表
from . import send_message
from . import receive_message
6、发布模块
制作发布压缩包步骤：
创建setup.py的文件
from distutils.core import setup
setup(name='send_message',#包名
    version='1.0',#版本
    description='发送消息模块',#描述信息
    long_description='完整的发送和接收消息模块',#完整描述信息
    author='',#作者
    author_email='',#作者邮箱
    url='',#主页
    py_modules=['send_message','receive_message'])
构建模块
python3 setup.py build
生成发布压缩包
python3 setup.py sdist  直接生成.tar.gz
安装压缩包
tar -zxvf .tar.gz
python3 setup.py install
删除
rm -r 包名
7、pip安装第三方模块
将模块安装到python2.x环境
pip install pygame
pip uninstall pygame
将模块安装到python3.x环境
pip3 install pygame
pip3 uninstall pygame
8、单列设计模式
__new__方法：在内存中为对象分配空间，返回对象的引用。重写__new__方法一定要return super().__new__(cls)
设计模式是前人工作的总结和提炼，都是针对某一特定问题的成熟解决方案
使用设计模式是为了可重用代码，让代码更容易被他人理解，保证代码可靠性
目的：让类创建的对象，在系统中只有唯一的一个实列
每一次执行类名()返回的对象，内存地址是相同的。应用场景：音乐播放器、打印机、回收站
9、编码
python2.x 使用*_* coding:utf8 *_*  执行指令是python
# 引号前面的u告诉解释器这是一个utf8编码格式的字符串
hell = u'hello世界'
python3.x 执行指令是python3 直接支持utf-8
10、内建函数
eval()--将字符串当成有效的表达式来求值并返回计算结果
eval('1+1') 计算结果为2
不使用eval()直接转换input()的结果
11、文件操作
图片属于二进制文件：需要专门的软件打开。
操作文件步骤：打开文件、读写文件、关闭文件
忘记关闭文件会造成资源消耗
文件指针
rename remove listdir mkdir getcwd chdir path.dir
12、异常
程序停止并提示错误信息，抛出raise异常
当不确定用户输入的数据什么时候会报错时，进行异常捕获
try:
    尝试执行
except:
    出现错误的处理

针对不同的类型的错误，做出不同的响应
try:
    尝试执行
except 错误类型1:
    针对错误类型1，对应的代码处理
except（错误类型2，错误类型3）:
    针对错误类型2和3，对应的代码处理
except Exception as result:
    print('未知错误%s'% result)
else:
    没有异常才会执行的代码
finally:
    无论是否有异常都会执行的代码

抛出异常时，最后一行信息的第一个单词，就是错误类型

捕获未知错误
except Exception as result:
    print('未知错误 %s'% result)

异常的传递---当函数/方法执行出现异常，会将异常传递给函数/方法的调用一方，如果传递到主程序，仍然没有异常处理，程序才会终止。
在开发中，可以在主函数中增加异常捕获，能够保证代码整洁。

主动抛出异常raise
创建一个Exception的对象
使用raise关键字抛出异常对象
ex = Exception('密码长度不够')
raise ex
13、对象概念
类对象--在内存中只有一份
实列对象--在内存中只有一份
类属性（类名.类属性名称）、类方法 ---第一个参数是cls
类方法定义语法：
@classmethod
def 类方法名称(cls):
    pass
cls.类属性、cls.类方法
类属性定义语法：
变量名称=赋值。调用--类名.变量名称
实列属性、实列方法 ---第一个参数是self

不需要放类属性，也不需要访问对象属性，此时定义的属性和方法属于静态属性和方法
静态方法定义语法：
@staticmethod
def 静态方法名称():
    pass
调用静态方法，通过类名.静态方法名称
不需要访问实列属性/类属性，可以定义静态方法
总结：
实列方法--方法内部需要方法实列属性。实列方法内部可以使用类名.访问类属性
类方法--方法内部只需要访问类属性
静态方法--方法内部，不需要访问实列属性和类属性

文件上传开源项目
https://github.com/filebrowser/filebrowser
git@github.com:filebrowser/filebrowser.git
安装插件，vue.js、web=prettier

git config --global http.sslVerify false
git config --global http.sslProxy https://proxy.example.com:8080
git config --global https.sslVerify false
git config --global https.sslProxy https://proxy.example.com:8080

go mod init github.com/filebrowser/filebrowser/v2
清除本地的模块缓存信息
go clean -modcache
go mod download
移除全局的 core.compression 配置，让 Git 恢复默认的压缩方式。
git config --global --unset core.compression

go build ./...
go env

中国最可靠的 Go 模块代理
https://goproxy.cn
go env -w GOPROXY=https://goproxy.cn,direct

set GOPROXY=https://goproxy.cn,direct

set HTTP_PROXY=http://proxy.server.com:port
set HTTPS_PROXY=http://proxy.server.com:port

set HTTP_PROXY=https://goproxy.cn
set HTTPS_PROXY=https://goproxy.cn
git config --global user.name 'chipeak'
git config --global user.email 'deng.ruofei@chipeak.com'


go env -w GO111MODULE=on
如下代理设置，下载最可靠
go env -w GOPROXY=https://goproxy.io,direct

# 设置不走 proxy 的私有仓库，多个用逗号相隔（可选）
go env -w GOPRIVATE=*.corp.example.com

# 设置不走 proxy 的私有组织（可选）
go env -w GOPRIVATE=example.com/org_name

go get github.com/asdine/storm/v3

1、克隆项目
git@github.com:filebrowser/filebrowser.git
2、依赖安装，安装依赖的时候需要配置代理
go get ./...
代理配置如下执行命令
go env -w GO111MODULE=on
go env -w GOPROXY=https://goproxy.io,direct
3、执行，转到server子目录执行如下指令，未必正确
go run *.go
4、使用go mod tidy
会自动更新您的 go.mod 和 go.sum 文件，以确保它们与当前项目所需要的依赖项一致。

==============七牛消息队列===================
https://github.com/panjf2000/ants